#include<iostream>
#include<istream>
#include<string>
#include<stdio.h>
#include<cstdlib>
#include<fstream>
#include<dirent.h>

using namespace std;

typedef struct 
{
	int pageID;
	char author[100];
	char title[200];
	int sequence;
	int item;
	char itemN[100];  
	char fileN[100];

} book;

typedef struct {
	
	book* article;

} bookArr;

void print();
int index = 0;   //fix

void openDir(bookArr *p) {

	DIR *direct;
	struct dirent *entry;
	string line;

	string D;
	int j = 0;
	ifstream infile;


	cout << "Enter directory: " << endl;
	cin >> D;

	const char * c = D.c_str();   //to get rid of conversion errors

	if (direct = opendir(c))  //correct directory
	{
		strcpy(p->article[index].itemN, c);   //saving directory name


		while (entry = readdir(direct)) // while directory is not empty
			if (strcmp(entry->d_name, ".") != 0 && strcmp(entry->d_name, "..") != 0)  //file isnt empty?
			{
				infile.open(entry->d_name);

				strcpy(p->article[index].fileN, entry->d_name);  //store file name
	

				while (!infile.eof() && getline(infile, line))   //traversing the individial files
				{

					for (int i = 0; i < line.length; i++)
					{

						while (((line[i] && line[i + 1]) >= 'A' && (line[i] && line[i + 1]) <= 'Z' || (line[i] || line[i + 1]) = '-')(line[i] || line[i + 1]) = ' ' && (line[i] != 'B' && line[i + 1] != 'y'))   //if all caps and not "By", a title. includes dashes and spaces
							p->article[index].title[j] = line[i];

						if (line[i] = 'B' && line[i + 1] == 'y')  //everything after "By" until ??? is an author
							p->article[index].author[j] = line[i];

						else
							p->article[index].author[j] = ' ';     //if no author is found, " " is saved

						j++;
					}


				}

				p->article[index].sequence = p->article[index].fileN.substr(4, 8);
				p->article[index].pageID = p->article[index].fileN.substr(12);
				p->article[index].item = p->article[index].itemN.substr(9);

				index++;
			}


		closedir(direct);

		print();

	}

	else
		cout << "No such directory." << endl;

}


void print() {

	for (int i = 0; i < index; i++)
	{

		cout << " ITEM: " << p[i].item << endl;
		cout << " TITLE: " << p[i].title << endl;
		cout << " AUTHOR: " << p[i].author << endl;
		cout << " ID: " << p[i].pageID << endl;
		cout << " SEQUENCE: " << p[i].sequence << endl << endl;
		
	}

}

int main() {








